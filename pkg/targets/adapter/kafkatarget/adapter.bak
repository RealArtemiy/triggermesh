/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package kafkatarget

import (
	"context"
	"crypto/tls"
	"encoding/json"
	"fmt"

	"go.uber.org/zap"

	cloudevents "github.com/cloudevents/sdk-go/v2"

	pkgadapter "knative.dev/eventing/pkg/adapter/v2"
	"knative.dev/pkg/logging"

	"github.com/Shopify/sarama"

	"github.com/triggermesh/triggermesh/pkg/apis/targets"
	"github.com/triggermesh/triggermesh/pkg/metrics"
)

// NewTarget adapter implementation
func NewTarget(ctx context.Context, envAcc pkgadapter.EnvConfigAccessor, ceClient cloudevents.Client) pkgadapter.Adapter {
	logger := logging.FromContext(ctx)

	mt := &pkgadapter.MetricTag{
		ResourceGroup: targets.KafkaTargetResource.String(),
		Namespace:     envAcc.GetNamespace(),
		Name:          envAcc.GetName(),
	}

	metrics.MustRegisterEventProcessingStatsView()

	env := envAcc.(*envAccessor)

	var sc sarama.Client
	var err error

	config := sarama.NewConfig()
	tlsCfg := &tls.Config{}

	if env.SALSEnable {
		config.Net.SASL.Enable = env.SALSEnable
		config.Net.SASL.Mechanism = sarama.SASLMechanism(env.SecurityMechanisms)
		config.Net.SASL.User = env.Username
		config.Net.SASL.Password = env.Password
	}

	if env.TLSEnable {
		config.Net.TLS.Enable = env.TLSEnable
		tlsCfg, err = newTLSCertificatesConfig(tlsCfg, env.SSLClientCert, env.SSLClientKey)
		if err != nil {
			logger.Panic(err)
		}
		tlsCfg = newTLSRootCAConfig(tlsCfg, env.SSLCA)
		config.Net.TLS.Config = tlsCfg
	}

	if env.SecurityMechanisms == "GSSAPI" {
		kerberosConfig := sarama.GSSAPIConfig{
			AuthType:           sarama.KRB5_KEYTAB_AUTH,
			KeyTabPath:         env.KerberosKeytabPath,
			KerberosConfigPath: env.KerberosConfigPath,
			ServiceName:        env.KerberosServiceName,
			Username:           env.KerberosUsername,
			Password:           env.KerberosPassword,
			Realm:              env.KerberosRealm,
			DisablePAFXFAST:    true,
		}
		config.Net.SASL.GSSAPI = kerberosConfig
	}

	config.Producer.Return.Successes = true
	err = config.Validate()
	if err != nil {
		logger.Panic(err)
	}

	sc, err = sarama.NewClient(
		env.BootstrapServers,
		config,
	)
	if err != nil {
		logger.Panic(err)
	}

	if sc == nil {
		logger.Panic("Client is nil! Please check the configuration.")
	}

	kc, err := sarama.NewSyncProducerFromClient(sc)
	if err != nil {
		logger.Panic(err)
		logger.Panic("Error creating Kafka Producer")
	}

	return &kafkaAdapter{
		saramaClient:              sc,
		kafkaClient:               kc,
		topic:                     env.Topic,
		createTopicIfMissing:      env.CreateTopicIfMissing,
		flushTimeout:              env.FlushOnExitTimeoutMillisecs,
		topicTimeout:              env.CreateTopicTimeoutMillisecs,
		newTopicPartitions:        env.NewTopicPartitions,
		newTopicReplicationFactor: env.NewTopicReplicationFactor,

		discardCEContext: env.DiscardCEContext,

		ceClient: ceClient,
		logger:   logger,

		sr: metrics.MustNewEventProcessingStatsReporter(mt),
	}
}

var _ pkgadapter.Adapter = (*kafkaAdapter)(nil)

type kafkaAdapter struct {
	saramaClient sarama.Client
	kafkaClient  sarama.SyncProducer
	topic        string

	createTopicIfMissing bool

	flushTimeout              int
	topicTimeout              int
	newTopicPartitions        int
	newTopicReplicationFactor int

	discardCEContext bool

	ceClient cloudevents.Client
	logger   *zap.SugaredLogger

	sr *metrics.EventProcessingStatsReporter
}

// TODO check if starting kafka target adapter
// Returns if stopCh is closed or Send() returns an error.
func (a *kafkaAdapter) Start(ctx context.Context) error {
	a.logger.Info("Starting Kafka adapter")

	defer func() {
		a.kafkaClient.Close()
	}()

	// TODO
	// if a.createTopicIfMissing {
	// 	if err := a.ensureTopic(ctx, a.topic); err != nil {
	// 		return fmt.Errorf("failed ensuring Topic %s: %w", a.topic, err)
	// 	}
	// }

	if err := a.ceClient.StartReceiver(ctx, a.dispatch); err != nil {
		return fmt.Errorf("error starting the cloud events server: %w", err)
	}
	return nil
}

func (a *kafkaAdapter) dispatch(event cloudevents.Event) cloudevents.Result {
	var msgVal []byte

	if a.discardCEContext {
		msgVal = event.Data()
	} else {
		jsonEvent, err := json.Marshal(event)
		if err != nil {
			a.logger.Errorw("Error marshalling CloudEvent", zap.Error(err))
			return cloudevents.ResultNACK
		}
		msgVal = jsonEvent
	}

	// TODO: check with sarama
	// librdkafka provides buffering, we set channel size to 1
	// to avoid blocking tests as they execute in the same thread
	// deliveryChan := make(chan kafka.Event, 1)
	// defer close(deliveryChan)

	// TODO: partition
	msg := &sarama.ProducerMessage{
		Topic: a.topic,
		// Partition: ,
		Key:   sarama.StringEncoder(event.ID()),
		Value: sarama.ByteEncoder(msgVal),
	}

	partition, offset, err := a.kafkaClient.SendMessage(msg)
	if err != nil {
		a.logger.Errorw("Error producing Kafka message", zap.String("msg", string(msgVal)), zap.Error(err))
		return cloudevents.ResultNACK
	}

	a.logger.Debugf("Delivered message to topic %s [%d] at offset %v",
		a.topic, partition, offset)

	return cloudevents.ResultACK
}

// // TODO Check createTopic validate Only
// //ensureTopic creates a topic if missing
// func (a *kafkaAdapter) ensureTopic(ctx context.Context, topic string) error {
// 	a.logger.Infof("Ensuring topic %q", topic)

// 	adminClient, err := sarama.NewClusterAdminFromClient(a.saramaClient)
// 	if err != nil {
// 		return fmt.Errorf("error creating admin client from producer: %w", err)
// 	}
// 	defer adminClient.Close()

// 	err = adminClient.CreateTopic(topic, &sarama.TopicDetail{NumPartitions: 1, ReplicationFactor: 1}, false)
// 	if err != nil {
// 		switch err.Error() {
// 		case sarama.ErrNoError.Error():
// 			a.logger.Info("Successfully Created New Kafka Topic (ErrNoError)")
// 			return nil
// 		case sarama.ErrTopicAlreadyExists.Error():
// 			a.logger.Info("Kafka Topic Already Exists - No Creation Required")
// 			return nil
// 		default:
// 			a.logger.Error("Failed To Create Topic")
// 			return err
// 		}
// 	}
// 	return nil
// }

// func isTopicExistsErrorOrOk(err error) bool {
// 	return errors.Is(err, sarama.ErrTopicAlreadyExists) || errors.Is(err, sarama.ErrNoError)
// }

// if err, ok := checkTopicCreation.(*sarama.TopicError); ok && err.Err == sarama.ErrTopicAlreadyExists {
// 	return nil
// }
// if checkTopicCreation != nil {
// 	return checkTopicCreation
// }
// if err, ok := checkTopicCreation.(*sarama.TopicError); ok && err.Err == sarama.ErrTopicAlreadyExists {
// 	return nil
// }
// return checkTopicCreation
// switch t.Error.Code() {
// case kafka.ErrNoError:
// 	a.logger.Infof("Topic found: %q with %d partitions", t.Topic, len(t.Partitions))
// 	return nil
// case kafka.ErrUnknownTopic, kafka.ErrUnknownTopicOrPart:
// 	// topic does not exists, we need to create it.
// default:
// 	return fmt.Errorf("topic %q metadata returned inexpected status: %w", a.topic, t.Error)
// }

// a.logger.Infof("Creating topic %q", topic)
// results, err := adminClient.CreateTopics(ctx, ts, kafka.SetAdminOperationTimeout(time.Duration(a.topicTimeout)*time.Millisecond))
// if err != nil {
// 	return fmt.Errorf("error creating topic %q: %w", a.topic, err)
// }

// if len(results) != 1 {
// 	return fmt.Errorf("creating topic %s returned inexpected results: %+v", a.topic, results)
// }

// if results[0].Error.Code() != kafka.ErrNoError {
// 	return fmt.Errorf("failed to create topic %s: %w", a.topic, results[0].Error)
// }
